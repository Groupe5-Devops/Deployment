---
#scale up the services the morning
apiVersion: batch/v1
kind: CronJob
metadata:
  name: scaling-up-morning
  namespace: default
spec:
  schedule: "0 8 * * 1-5"  # At 08:00 on weekdays
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: kubectl-scaler
          containers:
          - name: scale-up-morning
            image: bitnami/kubectl:1.25.11
            command: ["/bin/sh", "-c"]
            args:
            - kubectl scale deployment backend-deploy --replicas=2 && \
              kubectl scale deployment front-deploy --replicas=2
          restartPolicy: OnFailure
---
#scale down to 50% the evening
apiVersion: batch/v1
kind: CronJob
metadata:
  name: scaling-down-evening
  namespace: default
spec:
  schedule: "0 18 * * 1-5"  # At 18:00 on weekdays
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: kubectl-scaler
          containers:
          - name: scale-down-evening
            image: bitnami/kubectl:1.25.11
            command: ["/bin/sh", "-c"]
            args:
            - kubectl scale deployment backend-deploy --replicas=1 && \
              kubectl scale deployment front-deploy --replicas=1
          restartPolicy: OnFailure
---
# scale down to 0 at 9pm on weekdays , the weekend is a bonus xD
apiVersion: batch/v1
kind: CronJob
metadata:
  name: scaling-down-night
  namespace: default
spec:
  schedule: "0 21 * * 1-5"  # At 21:00 on weekdays
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: kubectl-scaler
          containers:
          - name: final-scale-down
            image: bitnami/kubectl:1.25.11
            command: ["/bin/sh", "-c"]
            args:
            - kubectl scale deployment backend-deploy --replicas=0 && \
              kubectl scale deployment front-deploy --replicas=0
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubectl-scaler
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubectl-scaler
  namespace: default
rules:
- apiGroups: ["apps"]
  resources: ["deployments", "deployments/scale"]
  verbs: ["get", "list", "watch", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubectl-scaler
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubectl-scaler
subjects:
- kind: ServiceAccount
  name: kubectl-scaler
  namespace: default

